.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "MidWay 3"
.TH MidWay 3 "2004-06-17" "perl v5.8.6" "User Contributed Perl Documentation"
.SH "NAME"
MidWay \- Perl extension for MidWay, a service request broker.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use MidWay;
.Ve
.Sh "Client Service Call \s-1API\s0"
.IX Subsection "Client Service Call API"
.Vb 4
\&    $rc = mwattach ["url" [, "progname" [ flags]]];
\&    $rc = mwdetach ;
\&    ($rc, $replydata, $applicationreturncode) = 
\&            mwcall "service" [, "data" [, flags]];
.Ve
.PP
.Vb 1
\&    $rc = mwsetcred authentication_type, "username" [, ...];
.Ve
.PP
.Vb 3
\&    $handle = mwacall "service" [, "data" [, flags]];
\&    ($rc, $replydata, $applicationreturncode) = 
\&            mwfetch $handle [, flags];
.Ve
.PP
.Vb 1
\&    @svclist = mwlistsvc [ glob ];
.Ve
.Sh "Logging \s-1API\s0"
.IX Subsection "Logging API"
.Vb 3
\&    mwlog loglevel, "printf formated message", ...;
\&    mwopenlog "progname" [, "filename" [, loglevelthreshold]];
\&    $oldlevel = mwsetloglevel [ newloglevelthreshold];
.Ve
.Sh "Extentions to \s-1API\s0 for Servers"
.IX Subsection "Extentions to API for Servers"
.Vb 10
\&    sub servicefunction {
\&        my %svcinfo = @_;
\&        my $handle =      $svcinfo {'handle'};
\&        my $data =        $svcinfo {'data'};
\&        my $flags =       $svcinfo {'flags'};
\&        my $servicename = $svcinfo {'service'};
\&        my $deadline =    $svcinfo {'deadline'};
\&        my $clientid =    $svcinfo {'clientid'};
\&        my $serverid =    $svcinfo {'serverid'};
\&        my $serviceid =   $svcinfo {'serviceid'};
.Ve
.PP
.Vb 4
\&        body of service function
\&        mwreply returndata, returncode, applicationreturncode, flags;
\&        mwforward "service", data, , flags;
\&    }
.Ve
.PP
.Vb 2
\&    $rc = mwprovide "servicename", \e&servicefunction, flags;
\&    $rc = mwunprovide "servicename";
.Ve
.PP
.Vb 2
\&    $rc = mwservicerequest [flags];
\&    $rc = mwMainLoop [flags];
.Ve
.PP
.Vb 4
\&    sub tasklet {
\&        my $taskref = shift;
\&        return 0;
\&    }
.Ve
.Sh "Tasklet \s-1API\s0"
.IX Subsection "Tasklet API"
.Vb 3
\&    $taskref = mwaddtask \e&tasklet, interval [, initialdelay]; 
\&    $rc = mwwaketask $taskref;
\&    $rc = mwsettaskinterval $taskref, $interval;
.Ve
.PP
.Vb 1
\&    mwdotasks ;
.Ve
.ie n .Sh "Event \s-1API\s0 $rc\fP = mweventbcast \f(CW$eventname\fP [, \f(CW$data];"
.el .Sh "Event \s-1API\s0 \f(CW$rc\fP = mweventbcast \f(CW$eventname\fP [, \f(CW$data\fP];"
.IX Subsection "Event API $rc = mweventbcast $eventname [, $data];"
.Vb 1
\&    $rc = mwevent $eventname, $data, $username, $clientname;
.Ve
.PP
.Vb 3
\&    sub eventhandler {
\&        my $event = shift;
\&        my $data =) shift;
.Ve
.PP
.Vb 2
\&        return;
\&    };
.Ve
.PP
.Vb 1
\&    $subid = mwsubscribe $pattern, $flags, \e&eventhandler;
.Ve
.PP
.Vb 1
\&    $rc = mwunsubscribe $subid;
.Ve
.PP
.Vb 1
\&    mwrecvevents();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides a Perl interface to the MidWay C api.  See the
man pages for the C api for the gory details.  Note that the C library
must be installed on you host. If you don't have it, use the Netclient
module instead. It is implemented completely in Perl, and don't
require any compilation.  Of course it only support the \s-1SRB\s0 protocol,
and call/forward/reply only.  This native module does it all.
.PP
The differences in Perl can be summed up as follows:
.PP
All char * data, int datalen pairs are replace by a Perl scalar,
pretty straight forward since Perl scalars may contain \s-1NUL\s0 chars.  If
you want to do the equivalent to \s-1NULL\s0 for data, pass undef as data
argument.
.PP
Function pointers are replaced by references to Perl subroutines.
.PP
mwcall and mwfetch return a list instead of returning thru their
parameters.  This make more sense in Perl. Just note that in case of
failure they return a list with one element only, the return code.
This might change in order to be more in compliance to Perl error
handling.
.PP
I might change the parameter order in some Perl call, in order to move
the more used parameters forward. All parameters defaults to either 0
or "", and this may be used as fillers if needed.
.PP
Note the the service handler functions are passed a hash. This
reflects the reason we use a struct i the native C \s-1API\s0. Members will
be added without notice.
.SH "Exported constants"
.IX Header "Exported constants"
.Vb 39
\&  MWCLIENT
\&  MWCLIENTMASK
\&  MWCONV
\&  MWEVSTRING
\&  MWEVGLOB
\&  MWEVREGEXP
\&  MWEVEREGEXP
\&  MWFAIL
\&  MWGATEWAY
\&  MWGATEWAYMASK
\&  MWINDEXMASK
\&  MWLOG_ALERT
\&  MWLOG_DEBUG
\&  MWLOG_DEBUG1
\&  MWLOG_DEBUG2
\&  MWLOG_DEBUG3
\&  MWLOG_DEBUG4
\&  MWLOG_ERROR
\&  MWLOG_FATAL
\&  MWLOG_INFO
\&  MWLOG_WARNING
\&  MWMAXNAMELEN
\&  MWMAXSVCNAME
\&  MWMORE
\&  MWMULTIPLE
\&  MWNOBLOCK
\&  MWNOREPLY
\&  MWNOTCLIENT
\&  MWNOTIME
\&  MWNOTRAN
\&  MWSAFEPATH
\&  MWSERVER
\&  MWSERVERMASK
\&  MWSERVERONLY
\&  MWSERVICEMASK
\&  MWSIGRST
\&  MWSTDIO
\&  MWSUCCESS
\&  MWUNIQUE
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Terje Eggestad, terje.eggestad@iname.com
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIMidWay::NetClient\fR\|(3). \fIMidWay\fR\|(7), 
mwacall(3C), mwcall(3C), mwfetch(3C), mwattach(3C), mwdetach(3C), 
mwprovide(3C), mwunprovide(3C), mwlog(3C), mwloglevel(3C), 
mwbegin(3C), mwcommit(3C), mwabort(3C), mwreply(3C), mwforward(3C), 
mwMainLoop(3C), mwservice(3C), mwservicerequest(3C)
